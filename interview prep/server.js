// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const f1=()=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f1');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   const f2=(f1)=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //      f1()
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f2');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   const f3=(f2)=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     f2(f1)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f3');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   const f4=(f3)=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     f3(f2)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f4');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   }


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const f1 = () => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f1');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const f2 = () => {

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f2');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const f3 = () => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f3');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const f4 = () => {

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('f4');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }




// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const f5 = new Promise((resolve, reject) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     resolve('f5')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // })

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //promise chaning
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // f5.then(res => f4()).then((val) => f3()).then((res) => f2()).then((res) => f1())



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //async 

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const f8 =async()=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     let data =await f5;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         f4();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         f3();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         f2();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         f1();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // f8();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //promise all
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const promise1 = Promise.resolve(3);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const promise3 = new Promise((resolve, reject) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   resolve('foooo')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Promise.all([promise1, promise3]).then((values) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   console.log(values);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //when all are full filled and resolved

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //The Promise.allSettled() method returns a promise that resolves after all of the given promises have either fulfilled or rejected, with an array of objects that each describes the outcome of each promise.

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const promise1 = Promise.reject(0);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const promise2 = new Promise((resolve) => setTimeout(resolve, 100, 'quick'));
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const promise3 = new Promise((resolve) => setTimeout(resolve, 500, 'slow'));

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const promises = [promise1, promise2, promise3];

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Promise.any(promises).then((value) => console.log(value));

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // expected output: "quick"  when any of itreable is fullfilled and resovled first it will exectuted any one fastest


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //The Promise.race() method returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise.



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const promise1 = new Promise((resolve, reject) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     setTimeout(resolve, 500, 'one');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   const promise2 = new Promise((resolve, reject) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     setTimeout(resolve, 100, 'two');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   Promise.race([promise1, promise2]).then((value) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(value);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     // Both resolve, but promise2 is faster
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   });
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   // expected output: "two"







// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //asyncc for normal function automatically returns a promise

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function hello() { return "Hello" };
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // hello().then(val=>console.log(val));


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const object1 = {};

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Object.defineProperty(object1, 'property1', {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   value: 42,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   writable: false
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // object1.property1 = 77;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(object1.property1)


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //pop

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let greetings = {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   0: 'Hi',
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   1: 'Hello',
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   2: 'Howdy',
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   removeLast() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     return [].pop.call(this);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   },
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let greting = greetings.removeLast();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(greting);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(greetings);



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // delete 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let scores=[1,2,3,4,5,6];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // scores.splice(3,2);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(scores); //[1,2,3,6]


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //insert
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // scores.splice(3,0,'lavi','chhavi')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(scores); //[1,2,3,''lavi','chhavi',6]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //map  -- loops and returns array

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newarr=['lavi','chhavi','yashu']

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let arr=newarr.map((ele,index,array)=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   console.log(ele,index,array);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   return 1;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // })
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //  console.log(arr)

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // lavi 0 [ 'lavi', 'chhavi', 'yashu' ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // chhavi 1 [ 'lavi', 'chhavi', 'yashu' ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // yashu 2 [ 'lavi', 'chhavi', 'yashu' ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // [ 1, 1, 1 ]


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //foreach --- loopa nd return undefined


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // newarr.forEach((ele,index,array)=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   console.log(ele,index,array);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // })

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // lavi 0 [ 'lavi', 'chhavi', 'yashu' ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // chhavi 1 [ 'lavi', 'chhavi', 'yashu' ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // yashu 2 [ 'lavi', 'chhavi', 'yashu' ]


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // function Counter() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   this.count = 0;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   let self = this;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   return {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       increase: ()=> {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //           this.count++;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       },
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       current: function () {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //           return self.count;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       },
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       reset: function () {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //           self.count = 0;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let count=new Counter();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let num=[1,2,3,4]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // num.forEach(function(e){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   this.increase()
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // },count);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(count.current())  //4



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //filter

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let num=[1,34,2,5,67]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(num.filter(e=>e>5))  //[34,67]


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //every -- if all values and condition are statisfied then return true else false


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(num.every(e=>e>5))  //false

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //some - //every -- if any one  value and condition are statisfied then return true else false

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(num.some(e=>e>5))  //true

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // find -- find the first element which satisfy the conditions

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(num.find(e=>e>5))  //34


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //question 1 balance these parathesis
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //"(())" -- true
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // "()()()("--fALSE

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let value="(())";

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //Array.from(value)  or value.split(""))

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x=value.split('').reduce((prev,curr)=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       if(curr=='('){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         return ++prev;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       }else if(curr==')'){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         return --prev;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       }else{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         return prev
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // },0)

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x?false:true)



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // question 2 -- take an array of numbers and find sum of all odd numbers

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray = [3, 5, 2, 4, 1]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr = numarray.reduce((prev, curr) => curr % 2 != 0 ? prev + curr : prev, 0)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr)

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //question3 --take an array of numbers and find sum of numbers at odd indice

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray1 = [3, 5, 2, 8, 1]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr2 = numarray1.reduce((prev, curr, index) => index % 2 != 0 ? prev + curr : prev, 0)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr2)

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 4) take an array of numbers and find biggest number in the array


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray4 = [3, 5, 2, 8, 1000]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr4 = numarray4.reduce((prev, curr, index) => prev > curr ? prev : curr, 0)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr4)


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 5)take an array of numbers and find return an array with only even numbers doubled 


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray5 = [3, 5, 2, 8, 1000]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr5 = numarray5.reduce((prev, curr, index) => curr % 2 == 0 ? [...prev, curr * 2] : [...prev, curr], [])
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr5)


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //6)take an array of numbers and 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //return an object like {odd:<no.of odd numbers in array>,even:<no.of even numbers in array>}


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray6 = [3, 5, 2, 8, 1000]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr6 = numarray6.reduce((prev, curr, index) => curr % 2 != 0 ? { ...prev, 'odd': ++prev['odd'] } : { ...prev, 'even': ++prev['even'] }, { 'odd': 0, 'even': 0 })
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr6);


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //7)take an array of words and return an object such that {[length of word]:<no. of words with that length>}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray7 = ['apple', 'grapes', 'mango', 'watermelon', 'kiwi']
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr7 = numarray7.reduce((prev, curr, index) => (prev[curr.length] ? { ...prev, [curr.length]: ++prev[curr.length] } : { ...prev, [curr.length]: 1 }), {})
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr7);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //8take an array of words and return an array of strings with no vowels

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray8 = ['apple', 'grapes', 'mango', 'watermelon', 'kiwi']
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr8 = numarray8.reduce((prev, curr, index) => ([...prev, curr.split('').map((e) => (/^[aeiou]$/i).test(e) ? '' : e).join('')]), [])
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr8);


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //9 return object -> {<word> : <word.length>}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray9 = ['apple', 'grapes', 'mango', 'watermelon', 'kiwi']
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr9 = numarray9.reduce((prev, curr, index) => ({ ...prev, [curr]: curr.length }), {})
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr9);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //10 make the map function from reduce
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray10 = ['apple', 'grapes', 'mango', 'watermelon', 'kiwi'];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let funcMap = (e) => e + 2;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr10 = numarray10.reduce((prev, curr, index) => ([...prev, funcMap(curr)]), [])
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr10);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 11 make filter function from reduce

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray11 = ['apple', 'grapes', 'mango', 'watermelon', 'kiwi'];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let funcFliter = (e) => e.length > 5;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr11 = numarray10.reduce((prev, curr, index) => (funcFliter(curr) ? [...prev, curr] : [...prev]), [])
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr11);



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //12 remove duPLICATES FROM ARRAY
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let numarray13 = ['apple', 'grapes', 'mango', 'watermelon', 'kiwi', 'apple', 1, 1, 3, 3];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newoddarr13 = numarray13.reduce((prev, curr, index) => (prev.includes(curr) ? [...prev] : [...prev, curr]), [])
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newoddarr13);





// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //13 Take an array of array and flatten them into a single array using only reduce once


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //flatten a ArraAy
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newarr = ['lavi', [2, 5, ['cjjhab', 'fggg', [4, 6]]]]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newarr88 = [];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newarrFunc = (currArr) => {

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   currArr.forEach(element => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     if (Array.isArray(element)) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       newarrFunc(element)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     else {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       newarr88.push(element)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   });
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // newarrFunc(newarr)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newarr2=newarr.reduce((prev,curr,index)=>Array.isArray(curr)?[...prev,...(curr.reduce((prev2,curr2,index)=>Array.isArray(curr2)?[...prev2,...curr2]:[...prev2,curr2],[]))]:[...prev,curr],[]);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //  console.log(newarr88)

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //sort - for numbers we add on compare func

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let num=[78,9,56,3,8];

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let compare=(a,b)=>{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   if(a>b)return 1;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   if(a<b) return -1;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   if(a==b) return 0;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //sort in ascending order
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x=num.sort((a,b)=>a-b);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x);


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let animals = [
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   'cat', 'dog', 'elephant', 'bee', 'ant'
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // ];

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x1=animals.sort();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x1)


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //concAT

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x1=[1,2,3]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x2=[8,5,6]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x3=[4,5,678]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x4=x1.concat(x2,x3,x1);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x4);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //[
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   1, 2, 3,   8, 5,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   6, 4, 5, 678, 1,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   2, 3
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // ]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x5=[].concat(x2,x3,x1);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x5);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // [
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   8, 5, 6, 4, 5,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 678, 1, 2, 3
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x6=[].concat('lavi','chhavi');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x6)  //[ 'lavi', 'chhavi' ]


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //symbol  -- primitive DATAtype in js in es6

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let s=Symbol('lavi') //  symbol function creates a new unquie value each time u call it
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(s) //Symbol(lavi)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //internally it calls toString method
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(s.description) //lavi
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(s.toString()) //lavi

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(Symbol() === Symbol()); // false
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // as each symbol calls a unique value


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let s1=Symbol('lavi')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(s1 === s); // false
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // as each symbol calls a unique value

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(typeof s1) //symbol

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let s = new Symbol(); // error


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //sharing symbol

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // ES6 provides you with the global symbol registry that allows you to share symbols globally.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // If you want to create a symbol that will be shared,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // you use the Symbol.for() method instead of calling the Symbol() function as symbol symbol .

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let ssn3 = Symbol.for('ssn');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // The Symbol.for() method first searches for the symbol with the  ssn key in the global symbol registry.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // It returns the existing symbol if there is one. Otherwise, the Symbol.for() method creates a new symbol, 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //registers it to the global symbol registry with the specified key, and returns the symbol.

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Later, if you call the Symbol.for() method using the same key,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // the Symbol.for() method will return the existing symbol.

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let ss2=Symbol.for('ssn');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // will call same key as its already there in global symbol registory

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(ssn3===ss2)



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //To get the key associated with a symbol, you use the Symbol.keyFor() 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let ss2=Symbol.for('ssn');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(Symbol.keyFor(ss2)) //ssn

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let systemID = Symbol('sys');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(Symbol.keyFor(systemID)) //undefined



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // var numbers=[1,2,3,4]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let it=numbers[Symbol.iterator]()
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(it.next())

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // class List {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     constructor() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.elements = [];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     add(element) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.elements.push(element);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     *[Symbol.iterator]() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         for (let element of this.elements) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             yield  element;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let chars = new List();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // chars.add('A');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // chars.add('B')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // chars.add('C')

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // because of the Symbol.iterator
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // for (let c of chars) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(c);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(Array.from(([...'377']),))

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // flat till deppth

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x=[1,3,4,[4,[5,[4,6]]]]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x.flat(Infinity)) // flat how much is there  
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // [
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     1, 3, 4, 4,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     5, 4, 6
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x.flat(1)) // flat  till 1  is there [ 1, 3, 4, 4, [ 5, [ 4, 6 ] ] ]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // it helps to remove empty areas a;lso

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x1=[1,,6,7,8,,,,8]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x1.flat()) // flat  [ 1, 6, 7, 8, 8 ]


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x1=[1,2,4,[4,4,4]]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x2=x1.flatMap((e)=>e)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x2) // [1, 2, 4, 4, 4, 4 ]

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const title = 'JavaScript array join example';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const url = title.split(' ')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     .join()
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     .toLowerCase();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(url);


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //search -- The search() method accepts a regular expression and returns the index of the first match in a string.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let re = /[A-Z]/;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str = 'hi jhere! How are you?';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let index = str.search(re);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(index); //10

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let re1 = /[0-9]/;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str1 = 'Hello, JavaScript!';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let index1 = str1.search(re1);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(index1); //-1





// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //index 

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str='lavirastogi'
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // str='lavi'+str[3];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(str);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str2='concta'.concat(str,'ffff','kkkk')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(str2) //conc1tblueffff

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let num=[1,'tblue',' ','ffff']
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str3='conc'.concat(...num)  //conc1tblue ffff
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(str3)  



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //Using a replacement function
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Instead of passing a newSubstr to the second parameter of the replace() method, you can pass a replacement function as follows:

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newStr = str.replace(substr | regexp, replacer);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // In this syntax, the replace() method will invoke the replacer function after the match has been performed. 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //It then uses the result of this function as the replacement string.



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str = "I like to eat, eat, eat apples and bananas";
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let re = /apples|bananas/gi;

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let newStr = str.replace(re, (match,i,str) => { 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log({match}); 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log({i});
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log({str});
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     return match.toUpperCase();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(newStr);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { i: 24 }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { str: 'I like to eat, eat, eat apples and bananas' }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { match: 'bananas' }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { i: 35 }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { str: 'I like to eat, eat, eat apples and bananas' }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // I like to eat, eat, eat APPLES and BANANAS

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str4='lgrl';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(str4.replace('gr','lavi')) //llavil


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let str = 'JavaScript Substring';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let substring = str.substring(0,4);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(substring); //java





// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // The String.prototype.slice() 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // method extracts a portion of a string and returns 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // it as a substring. The following shows the syntax of the slice() method:

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // slice(start, end)



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //iterator

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // class IterateClass {

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     constructor(count = 0) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.start = 0;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.count = count;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     [Symbol.iterator]() {

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         return {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             next: () => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                 if (this.count < 4) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     console.log('came here')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     let result = { value: this.count, done: false }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     this.count++;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     return result;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                 }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                 return { value: this.count, done: true };
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let evenNumbers = new IterateClass(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let iterator = evenNumbers[Symbol.iterator]();


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // for (const num of evenNumbers) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // came here
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 2
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // came here
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 3

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let result = iterator.next();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let result1 = iterator.next();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let result2 = iterator.next();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let result3 = iterator.next();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result1)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result2)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result3)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: 2, done: false }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: 3, done: false }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: 4, done: true }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: 4, done: true }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // class Sequence {

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     constructor(start = 0, end = Infinity, interval = 1) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.start = start;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.end = end;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.interval = interval;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     [Symbol.iterator]() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         let counter = 0;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         let nextIndex = this.start;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         return {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             next: () => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                 if (nextIndex <= this.end) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     let result = { value: nextIndex, done: false }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     nextIndex += this.interval;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     counter++;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                     return result;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                 }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //                 return { value: counter, done: true };
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // };


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // let evenNumbers = new Sequence(2, 10, 2);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // for (const num of evenNumbers) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // function *generate(){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('hi i am first');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     yield(3);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log('hi i am second');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     yield(7)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // let gen= generate();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(gen)//Object [Generator] {}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // gives Object [Generator] {} which is a iterable object as it gives us next mothod() which has value and done properties

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Generators are created by the generator function function* f(){}.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Generators do not execute its body immediately when they are invoked.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Generators can pause midway and resumes their executions where they were paused. 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //The yield statement pauses the execution of a generator and returns a value.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Generators are iterable so you can use them with the for...of loop.


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(gen.next())
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //hi i am first
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: 3, done: false }


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //we paused exceution again when we call gen.next ()
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(gen.next())
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // hi i am second
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: 7, done: false }


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Using a generator to implement the Bag data structure

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // class Elementbag{
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     constructor(){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.element=[];

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     add(ele){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         this.element.push(ele);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     *[Symbol.iterator](){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //            for(const num of this.element){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //                yield num;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //            }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // let obj=new Elementbag();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // obj.add(3);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // obj.add(5);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // obj.add(7);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // for(const num of obj){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // returns the value of yeild
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // function *gen(){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //    yield 1;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //    yield 2; 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x=gen();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // for(const num of x){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //1 2


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // returns undefined
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // function *gen(){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     yield ;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //  }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //  let x=gen();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //  for(const num of x){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //      console.log(num)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //  }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //  //undefined



// // // // // // // // // // // // // // // // // // // // // // // // // // // // // function *gen(){
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //   let result= yield;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //   console.log(result);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // if we store yeild value in result it means whatever is value that we pass in next method  is stored in  result and displayed
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // let x=gen();
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next());
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next(1000));
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: undefined, done: false }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 1000
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // { value: undefined, done: true }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // function* baz() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // //     let arr = [yield, yield];
// // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(arr);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // var z = baz();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(z.next(8));  
// // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(z.next(7)); 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(z.next(9));

// // // // // // // // // // // // // // // // // // // // // // // // // // // let x=Symbol('lavvvv')
// // // // // // // // // // // // // // // // // // // // // // // // // // // let task ={name:'lavi',id:99 ,[x]:'fff'}

// // // // // // // // // // // // // // // // // // // // // // // // // // // for(const num in task){
// // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num)
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // let x8='jk';
// // // // // // // // // // // // // // // // // // // // // // // // // // // let x9 =x8[Symbol.iterator]();
// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x9.next())
// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x9.next())
// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(x9.next())

// // // // // // // // // // // // // // // // // // // // // // // // // // class IterateClass {

// // // // // // // // // // // // // // // // // // // // // // // // // //     constructor(count = 0) {
// // // // // // // // // // // // // // // // // // // // // // // // // //         this.start = 0;
// // // // // // // // // // // // // // // // // // // // // // // // // //         this.count = count;
// // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // //     [Symbol.iterator]() {

// // // // // // // // // // // // // // // // // // // // // // // // // //         return {
// // // // // // // // // // // // // // // // // // // // // // // // // //             next: () => {
// // // // // // // // // // // // // // // // // // // // // // // // // //                 if (this.count < 4) {
// // // // // // // // // // // // // // // // // // // // // // // // // //                     console.log('came here')
// // // // // // // // // // // // // // // // // // // // // // // // // //                     let result = { value: this.count, done: false }
// // // // // // // // // // // // // // // // // // // // // // // // // //                     this.count++;
// // // // // // // // // // // // // // // // // // // // // // // // // //                     return result;
// // // // // // // // // // // // // // // // // // // // // // // // // //                 }
// // // // // // // // // // // // // // // // // // // // // // // // // //                 return { value: this.count, done: true };
// // // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // let evenNumbers = new IterateClass(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // for(const num of evenNumbers){
// // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num)
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // //let iterator = evenNumbers[Symbol.iterator]();


// // // // // // // // // // // // // // // // // // // // // // // // // // // for (const num of evenNumbers) {
// // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num);
// // // // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // // // // came here
// // // // // // // // // // // // // // // // // // // // // // // // // // // 2
// // // // // // // // // // // // // // // // // // // // // // // // // // // came here
// // // // // // // // // // // // // // // // // // // // // // // // // // // 3

// // // // // // // // // // // // // // // // // // // // // // // // // // // let result = iterator.next();
// // // // // // // // // // // // // // // // // // // // // // // // // // // let result1 = iterator.next();
// // // // // // // // // // // // // // // // // // // // // // // // // // // let result2 = iterator.next();

// // // // // // // // // // // // // // // // // // // // // // // // // // // let result3 = iterator.next();

// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result)
// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result1)
// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result2)
// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(result3)
// // // // // // // // // // // // // // // // // // // // // // // // // // // { value: 2, done: false }



// // // // // // // // // // // // // // // // // // // // // // // // // function *gen(){

// // // // // // // // // // // // // // // // // // // // // // // // //     yield 4;

// // // // // // // // // // // // // // // // // // // // // // // // //     yield 6;

// // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // // let x=gen();
// // // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())
// // // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())
// // // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())

// // // // // // // // // // // // // // // // // // // // // // // // // for(const num of gen()){
// // // // // // // // // // // // // // // // // // // // // // // // //     console.log(num)
// // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // function *gen(start,end){
// // // // // // // // // // // // // // // // // // // // // // // //     for(let i=start;i<end;i++){
// // // // // // // // // // // // // // // // // // // // // // // //         yield String.fromCharCode(i)
// // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // function *gen2(){
// // // // // // // // // // // // // // // // // // // // // // // //     //0-9
// // // // // // // // // // // // // // // // // // // // // // // //     yield *gen(0,10)

// // // // // // // // // // // // // // // // // // // // // // // //    // yield *gen(65,69)
// // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // for(const code of gen2()){
// // // // // // // // // // // // // // // // // // // // // // // // //     console.log(code)
// // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // let x=gen2();
// // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())
// // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())
// // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())
// // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())
// // // // // // // // // // // // // // // // // // // // // // // // console.log(x.next())



// // // // // // // // // // // // // // // // // // // // // // // // let j=Object.create({name:'mm'})
// // // // // // // // // // // // // // // // // // // // // // // // console.log(j)


// // // // // // // // // // // // // // // // // // // // // // // // let num=[9,8,9,6,8]
// // // // // // // // // // // // // // // // // // // // // // // // console.log(num.splice(4,2,"ll",'kkk'))
// // // // // // // // // // // // // // // // // // // // // // // // console.log(num)
// // // // // // // // // // // // // // // // // // // // // // // const currfunc =(a)=>{
// // // // // // // // // // // // // // // // // // // // // // //     return (b)=>{
// // // // // // // // // // // // // // // // // // // // // // //         if(b)return currfunc(a+b)
// // // // // // // // // // // // // // // // // // // // // // //         else return a
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // console.log(currfunc(1)(2)(4)())

// // // // // // // // // // // // // // // // // // // // // // const compose = (...fns) => {
// // // // // // // // // // // // // // // // // // // // // //     return x => {
// // // // // // // // // // // // // // // // // // // // // //         return fns.reduceRight((y, f) => f(y), x)
// // // // // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // const double = x => x * 2
// // // // // // // // // // // // // // // // // // // // // // const square = x => x * x

// // // // // // // // // // // // // // // // // // // // // // // // function composition
// // // // // // // // // // // // // // // // // // // // // // var output_final = compose(square, double)(2);
// // // // // // // // // // // // // // // // // // // // // // // console.log(output_final);


// // // // // // // // // // // // // // // // // // // // // // // const g=(...ar)=>{
// // // // // // // // // // // // // // // // // // // // // // //     console.log(ar)
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // g(9,8,9,9)

// // // // // // // // // // // // // // // // // // // // // // // function xy(price){
// // // // // // // // // // // // // // // // // // // // // // //  return price *7
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // (function exp(){
// // // // // // // // // // // // // // // // // // // // // // // console.log('fff')
// // // // // // // // // // // // // // // // // // // // // // // })()


// // // // // // // // // // // // // // // // // // // // // // // let uri = "employeeDetails?na me=john&occu_pation=manager";
// // // // // // // // // // // // // // // // // // // // // // // let encoded_uri = encodeURI(uri); 

// // // // // // // // // // // // // // // // // // // // // // // console.log(encoded_uri)  // employeeDetails?na%20me=john&occu_pation=manager

// // // // // // // // // // // // // // // // // // // // // // // let decoded_uri = decodeURI(encoded_uri);
// // // // // // // // // // // // // // // // // // // // // // // console.log(decoded_uri) //employeeDetails?na me=john&occu_pation=manager



// // // // // // // // // // // // // // // // // // // // // // //5 fac -- 5*4*3*2*1

// // // // // // // // // // // // // // // // // // // // // // // const memofac=()=>{
// // // // // // // // // // // // // // // // // // // // // // //     let cache={}
// // // // // // // // // // // // // // // // // // // // // // //     return function x1(value){
// // // // // // // // // // // // // // // // // // // // // // //         if(cache[value]){
// // // // // // // // // // // // // // // // // // // // // // //             console.log('memooo')
// // // // // // // // // // // // // // // // // // // // // // //           return cache[value]
// // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // //         else{
// // // // // // // // // // // // // // // // // // // // // // //             console.log('new')
// // // // // // // // // // // // // // // // // // // // // // //             let res=value+50;
// // // // // // // // // // // // // // // // // // // // // // //             cache[value]=res;
// // // // // // // // // // // // // // // // // // // // // // //             return res
// // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // let fac=memofac();
// // // // // // // // // // // // // // // // // // // // // // // console.log(fac(5));
// // // // // // // // // // // // // // // // // // // // // // // console.log(fac(5));




// // // // // // // // // // // // // // // // // // // // // // // const memofac = () => {
// // // // // // // // // // // // // // // // // // // // // // //     let cache = {}
// // // // // // // // // // // // // // // // // // // // // // //     return function x1(value) {
// // // // // // // // // // // // // // // // // // // // // // //         if (cache[value]) {
// // // // // // // // // // // // // // // // // // // // // // //             console.log('memooo')
// // // // // // // // // // // // // // // // // // // // // // //             return cache[value]
// // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // //         else {
// // // // // // // // // // // // // // // // // // // // // // //             console.log('new');
// // // // // // // // // // // // // // // // // // // // // // //             let res = 1;
// // // // // // // // // // // // // // // // // // // // // // //             if (value === 2) {
// // // // // // // // // // // // // // // // // // // // // // //                 res = 2;
// // // // // // // // // // // // // // // // // // // // // // //             } else {
// // // // // // // // // // // // // // // // // // // // // // //                 res = value * x1(value - 1);  // 4*x1(3)  ---> // 3*x1(2) --> // 2
// // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // //             cache[value] = res;
// // // // // // // // // // // // // // // // // // // // // // //             return res
// // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // let fac = memofac();
// // // // // // // // // // // // // // // // // // // // // // // console.log(fac(4));

// // // // // // // // // // // // // // // // // // // // // // // // new
// // // // // // // // // // // // // // // // // // // // // // // // new
// // // // // // // // // // // // // // // // // // // // // // // // new
// // // // // // // // // // // // // // // // // // // // // // // // 24
// // // // // // // // // // // // // // // // // // // // // // // console.log(fac(5));
// // // // // // // // // // // // // // // // // // // // // // // // new
// // // // // // // // // // // // // // // // // // // // // // // // memooo
// // // // // // // // // // // // // // // // // // // // // // // // 120

// // // // // // // // // // // // // // // // // // // // // // var kk='ffffff'

// // // // // // // // // // // // // // // // // // // // // function getFunc() {
// // // // // // // // // // // // // // // // // // // // //     let value = 8;
// // // // // // // // // // // // // // // // // // // // //     let sum = new Function('return kk');
// // // // // // // // // // // // // // // // // // // // //     return sum;
// // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // //   let x=getFunc();
// // // // // // // // // // // // // // // // // // // // //   console.log(x())


// // // // // // // // // // // // // // // // // // // // // var addTo = () => {
// // // // // // // // // // // // // // // // // // // // //       var inner = 4;
// // // // // // // // // // // // // // // // // // // // //      function printName() {
// // // // // // // // // // // // // // // // // // // // //         console.log(inner);
// // // // // // // // // // // // // // // // // // // // //       };
// // // // // // // // // // // // // // // // // // // // //       return printName;
// // // // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // // // //     addTo()();



// // // // // // // // // // // // // // // // // // // // // for (var i = 0; i < 3; i++) {
// // // // // // // // // // // // // // // // // // // // // (function x1(val){
// // // // // // // // // // // // // // // // // // // // //     setTimeout(function(){console.log(val)},1000+val)
// // // // // // // // // // // // // // // // // // // // // })(i)
// // // // // // // // // // // // // // // // // // // // //   }


// // // // // // // // // // // // // // // // // // // // function foo() {
// // // // // // // // // // // // // // // // // // // //     let x = (y = 0);
// // // // // // // // // // // // // // // // // // // //     x++;
// // // // // // // // // // // // // // // // // // // //     y++;
// // // // // // // // // // // // // // // // // // // //     return x;
// // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // //   console.log(foo(), typeof x, typeof y);


// // // // // // // // // // // // // // // // // // // //   var myChars = ["a", "b", "c", "d"];
// // // // // // // // // // // // // // // // // // // //   delete myChars[2]
// // // // // // // // // // // // // // // // // // // //   console.log(myChars.length) //[ 'a', 'b', <1 empty item>, 'd' ]

// // // // // // // // // // // // // // // // // // // //   var obj={name:'dddd',id:44}
// // // // // // // // // // // // // // // // // // // //   delete obj.name;
// // // // // // // // // // // // // // // // // // // //   console.log(obj) //{ id: 44 }

// // // // // // // // // // // // // // // // // // // // let arr=[1,2]
// // // // // // // // // // // // // // // // // // // // console.log(10===[10])


// // // // // // // // // // // // // // // // // // // // let x= new Set([1,4,5,6,1,2])
// // // // // // // // // // // // // // // // // // // // console.log(x.delete(4)) //true
// // // // // // // // // // // // // // // // // // // // for(const val of x.entries()){
// // // // // // // // // // // // // // // // // // // //   console.log(val[1])  // 1,5,6,2
// // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // console.log(x) // {1, 5, 6, 2 }


// // // // // // // // // // // // // // // // // // // // //creating map with the array we have (key value pair)
// // // // // // // // // // // // // // // // // // // // let maparr= new Map([['a',1],['b',56]])
// // // // // // // // // // // // // // // // // // // // console.log(maparr) //{ 'a' => 1, 'b' => 56 }

// // // // // // // // // // // // // // // // // // // // maparr.set('d',5)
// // // // // // // // // // // // // // // // // // // // console.log(maparr) //{ 'a' => 1, 'b' => 56 }


// // // // // // // // // // // // // // // // // // // // //get an elemment
// // // // // // // // // // // // // // // // // // // // console.log(maparr.get('d'))  //5

// // // // // // // // // // // // // // // // // // // // //check the existing element
// // // // // // // // // // // // // // // // // // // // console.log(maparr.has('d'))  //true

// // // // // // // // // // // // // // // // // // // // //iterate over elements
// // // // // // // // // // // // // // // // // // // // for(const val of maparr){
// // // // // // // // // // // // // // // // // // // //   console.log(val) 
// // // // // // // // // // // // // // // // // // // //   //[ 'a', 1 ]
// // // // // // // // // // // // // // // // // // // //   // [ 'b', 56 ]
// // // // // // // // // // // // // // // // // // // //   // [ 'd', 5 ]
// // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // for(const [key,val] of maparr.entries()){
// // // // // // // // // // // // // // // // // // // //   console.log(key ,val) 

// // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // keys -- for getting all keys 
// // // // // // // // // // // // // // // // // // // // // values() -- for all values in array


// // // // // // // // // // // // // // // // // // // // //delete an element

// // // // // // // // // // // // // // // // // // // // // console.log(maparr.delete('d'))

// // // // // // // // // // // // // // // // // // // // // console.log(maparr) //{ 'a' => 1, 'b' => 56 }



// // // // // // // // // // // // // // // // // // // // // // check length of map
// // // // // // // // // // // // // // // // // // // // // console.log(maparr.size)  //2


// // // // // // // // // // // // // // // // // // // // // //clear all elemts in array

// // // // // // // // // // // // // // // // // // // // // console.log(maparr.clear()) 
// // // // // // // // // // // // // // // // // // // // // console.log(maparr) //{}


// // // // // // // // // // // // // // // // // // // // console.log(NaN==NaN)

// // // // // // // // // // // // // // // // // // // // async function func() {
// // // // // // // // // // // // // // // // // // // //   await 10;
// // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // console.log(func());//Promise { <pending> }

// // // // // // // // // // // // // // // // // // // // async function func() {
// // // // // // // // // // // // // // // // // // // //   return 10;
// // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // console.log(func());//


// // // // // // // // // // // // // // // // // // // // function delay() {
// // // // // // // // // // // // // // // // // // // //   return new Promise(resolve => setTimeout(resolve, 2000));
// // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // async function delayedLog(item) {
// // // // // // // // // // // // // // // // // // // //   await delay();
// // // // // // // // // // // // // // // // // // // //   console.log(item);
// // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // async function processArray(array) {
// // // // // // // // // // // // // // // // // // // //   array.forEach(item => {
// // // // // // // // // // // // // // // // // // // //     await delayedLog(item);
// // // // // // // // // // // // // // // // // // // //   })
// // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // processArray([1, 2, 3, 4]);


// // // // // // // // // // // // // // // // // // // console.log(+0===-0)

// // // // // // // // // // // // // // // // // // // "number"

// // // // // // // // // // // // // // // // // // let myNumber = 100;
// // // // // // // // // // // // // // // // // // let myString = "100";

// // // // // // // // // // // // // // // // // // console.log(typeof myNumber)
// // // // // // // // // // // // // // // // // // if (!typeof myNumber === "string") {
// // // // // // // // // // // // // // // // // //   console.log("It is not a string!");
// // // // // // // // // // // // // // // // // // } else {
// // // // // // // // // // // // // // // // // //   console.log("It is a string!");
// // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // if (!typeof myString === "number") {
// // // // // // // // // // // // // // // // // //   console.log("It is not a number!");
// // // // // // // // // // // // // // // // // // } else {
// // // // // // // // // // // // // // // // // //   console.log("It is a number!");
// // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // let x=Symbol.for('one')

// // // // // // // // // // // // // // // // // //4,5,1,2,

// // // // // // // // // // // // // // // // // // const promise =new Promise((resolve,reject)=>{
// // // // // // // // // // // // // // // // // //   console.log('1');
// // // // // // // // // // // // // // // // // //   resolve('2')
// // // // // // // // // // // // // // // // // //   console.log('3')
// // // // // // // // // // // // // // // // // // });
// // // // // // // // // // // // // // // // // // console.log('4')
// // // // // // // // // // // // // // // // // // promise.then((val)=>console.log(val))
// // // // // // // // // // // // // // // // // // console.log('5')


// // // // // // // // // // // // // // // // // //icon Space         ecaps ncoi
// // // // // // // // // // // // // // // // // //icon space     ecan spoci

// // // // // // // // // // // // // // // // // let reserve='icon Space';
// // // // // // // // // // // // // // // // // let newarrresveersed=[]
// // // // // // // // // // // // // // // // // let originalArr=reserve.split('');
// // // // // // // // // // // // // // // // // let originalVowel=originalArr.filter((e)=>(/^[aeiou]$/i).test(e)).reverse();
// // // // // // // // // // // // // // // // //  //[e,a,o,i]
// // // // // // // // // // // // // // // // // let count=0;
// // // // // // // // // // // // // // // // // let newArr=originalArr.forEach((currele,index,originalarr)=>{
// // // // // // // // // // // // // // // // //   if((/^[aeiou]$/i).test(currele)){
// // // // // // // // // // // // // // // // //     originalArr.splice(index,1,originalVowel[count]);
// // // // // // // // // // // // // // // // //     count++;
// // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // })
// // // // // // // // // // // // // // // // // console.log(originalArr.join('')); //ecan Spoci

// // // // // // // // // // // // // // // // // //anagram

// // // // // // // // // // // // // // // // // let str1='pain';
// // // // // // // // // // // // // // // // // let str2='naip';

// // // // // // // // // // // // // // // // // const sortStr=(str)=>{
// // // // // // // // // // // // // // // // //   return (str.split('')).sort().join('');
// // // // // // // // // // // // // // // // //  }
// // // // // // // // // // // // // // // // //  var isAnagram = function(s, t) {
// // // // // // // // // // // // // // // // //  return (sortStr(str1)===sortStr(str2))?true:false
// // // // // // // // // // // // // // // // //  };
// // // // // // // // // // // // // // // // //  console.log(isAnagram(str1,str2))

// // // // // // // // // // // // // // // // const [x, ...y] = [1, 2, 3, 4];
// // // // // // // // // // // // // // // // console.log(x, y);

// // // // // // // // // // // // // // // // function area( length = 10, width = 20 ) {
// // // // // // // // // // // // // // // //   console.log(length * width);
// // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // area();

// // // // // // // // // // // // // // // // async function apiCall(){
// // // // // // // // // // // // // // // //   return new Promise(resolve => {
// // // // // // // // // // // // // // // //       setTimeout(()=>{resolve('b')},2000)
// // // // // // // // // // // // // // // //   })
// // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // async function logger(){
// // // // // // // // // // // // // // // //   setTimeout(()=> console.log('a'),1000)
// // // // // // // // // // // // // // // //   console.log(await apiCall())
// // // // // // // // // // // // // // // //   console.log('c')
// // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // logger();

// // // // // // // // // // // // // // // innerHeight()

// // // // // // // // // // // // // // // function innerHeight(){
// // // // // // // // // // // // // // //   console.log('hi')
// // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // function outer() {
// // // // // // // // // // // // // //   if(()=>{}){
// // // // // // // // // // // // // //    console.log('hi');
// // // // // // // // // // // // // //    function inner() {
// // // // // // // // // // // // // //     return "Inner";
// // // // // // // // // // // // // //   }

// // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // }
// // // // // // // // // // // // // // outer();

// // // // // // // // // // // // // var obj={name:'lavi'}
// // // // // // // // // // // // // // let arr=[obj];
// // // // // // // // // // // // // //console.log(arr);

// // // // // // // // // // // // // var obj1={...obj}

// // // // // // // // // // // // // console.log(obj1)
// // // // // // // // // // // // const myGenerator = (function* () {
// // // // // // // // // // // //   yield 1;
// // // // // // // // // // // //   yield 2;
// // // // // // // // // // // //   yield 3;
// // // // // // // // // // // // })();
// // // // // // // // // // // // for (const value of myGenerator) {
// // // // // // // // // // // //   console.log('hi' +value);
// // // // // // // // // // // // }

// // // // // // // // // // // // for (const value of myGenerator) {
// // // // // // // // // // // //   console.log(value);
// // // // // // // // // // // // }

// // // // // // // // // // // function xy(){
// // // // // // // // // // // return new Promise((resolve,reject)=>{
// // // // // // // // // // //   resolve('resolvedd');
// // // // // // // // // // // })
// // // // // // // // // // // }
// // // // // // // // // // // xy().then(()=> {return 'dd'}).then(console.log);


// // // // // // // // // // // // group of anagrams

// // // // // // // // // // // let hash={}
// // // // // // // // // // // //input :['eat',"tea","tan","ate","nat","bat"]

// // // // // // // // // // // let str=["eat","tea","tan","ate","nat","bat"];

// // // // // // // // // // // str.forEach((currele)=>{
// // // // // // // // // // //   let strNew= currele.split('').sort();
// // // // // // // // // // //   hash[strNew]?hash[strNew].push(currele):hash[strnew]=
// // // // // // // // // // // })

// // // // // // // // // // const promise = new Promise((resolve,reject) => {
// // // // // // // // // //   resolve("2");
// // // // // // // // // // });

// // // // // // // // // // console.log(
// // // // // // // // // //   promise
// // // // // // // // // //   .then(console.log)
// // // // // // // // // //   .then(value => {console.log('9'); return value})
// // // // // // // // // //   .then(console.log('LOL'))
// // // // // // // // // // );


// // // // // // // // // // //i/p-- [{id:1, value: 20},{id: 2, value: 25},{id:3, value: 2},{id: 1, value: 4},{id: 2, value: 6}];

// // // // // // // // // // //Output: [];

// // // // // // // // // // let inputarr = [{ id: 1, value: 20 }, { id: 2, value: 25 }, { id: 3, value: 2 }, { id: 1, value: 4 }, { id: 2, value: 6 }];
// // // // // // // // // // let outputarr =[];
// // // // // // // // // // inputarr.forEach((currele)=>{
// // // // // // // // // //   let newfilterarr;
// // // // // // // // // //   newfilterarr=outputarr.filter((newarr)=>newarr.id===currele.id); 
// // // // // // // // // //   let newfilterindex=outputarr.findIndex((newarr)=>newarr.id===currele.id); 
// // // // // // // // // //  if(newfilterarr.length!=0){
// // // // // // // // // //   newfilterarr[0].value=newfilterarr[0].value+currele.value;
// // // // // // // // // //   outputarr.splice(newfilterindex,1,newfilterarr);
// // // // // // // // // //  }else{
// // // // // // // // // //   outputarr.push(currele)
// // // // // // // // // //  }
// // // // // // // // // // })
// // // // // // // // // // console.log(outputarr);




// // // // // // // // // // const promise = new Promise((resolve,reject) => {
// // // // // // // // // //   resolve("2");
// // // // // // // // // // });

// // // // // // // // // //   promise
// // // // // // // // // //   .then((val)=>console.log(val))
// // // // // // // // // //   .then(value => {console.log('9'); return value})
// // // // // // // // // //   .then(console.log('LOL'))

// // // // // // // // // // then always need a  callback function  so lOl no callback printed first
// // // // // // // // // //LOL
// // // // // // // // // //2
// // // // // // // // // //9


// // // // // // // // // // const promise = new Promise((resolve,reject) => {
// // // // // // // // // //   resolve("2");
// // // // // // // // // // });

// // // // // // // // // // console.log(
// // // // // // // // // //   promise
// // // // // // // // // //   .then(console.log)
// // // // // // // // // //   .then(value => {console.log('value',value); return value;})
// // // // // // // // // //   .then(v => console.log('now',v))
// // // // // // // // // //   .then(console.log('LOL'))
// // // // // // // // // // );
// // // // // // // // // // // o/p
// // // // // // // // // // // LOL
// // // // // // // // // // // Promise { <pending> }
// // // // // // // // // // // 2
// // // // // // // // // // // value undefined
// // // // // // // // // // // now undefined


// // // // // // // // // // group of anagrams

// // // // // // // // // let hash={}
// // // // // // // // // //input :['eat',"tea","tan","ate","nat","bat"]

// // // // // // // // // let str=["eat","tea","tan","ate","nat","bat"];

// // // // // // // // // str.forEach((currele)=>{
// // // // // // // // //   let strNew= currele.split('').sort();
// // // // // // // // //   hash[strNew]?hash[strNew].push(currele):hash[strNew]=[currele];

// // // // // // // // // })
// // // // // // // // // console.log(Object.values(hash));

// // // // // // // // // // /**
// // // // // // // // // //  * @param {string[]} strs
// // // // // // // // // //  * @return {string[][]}
// // // // // // // // // //  */
// // // // // // // // // //  var groupAnagrams = function(strs) {

// // // // // // // // // //   let hash={}
// // // // // // // // // //   //input :['eat',"tea","tan","ate","nat","bat"]

// // // // // // // // // //   let str=["eat","tea","tan","ate","nat","bat"];

// // // // // // // // // //   str.forEach((currele)=>{
// // // // // // // // // //     let strNew= currele.split('').sort();
// // // // // // // // // //     hash[strNew]?hash[strNew].push(currele):hash[strNew]=[currele];

// // // // // // // // // //   })
// // // // // // // // // //   return(Object.values(hash));
// // // // // // // // // //   };


// // // // // // // // var obj = {
// // // // // // // //     blendedClientUtilizationAnnualHrs: 1760,
// // // // // // // //     contractorsOnsiteHrs: 1920,
// // // // // // // //     ibmWeightedUtilizationAnnualHrs: 2053,
// // // // // // // //     ibmWeightedUtilizationMonthlyHrs: 171,
// // // // // // // //     landedHrs: 2070,
// // // // // // // //     localHrs: 1760,
// // // // // // // //     offshoreContractorsHrs: 2070,
// // // // // // // //     offshoreHrs: 2070
// // // // // // // // }
// // // // // // // // // console.log(Object.entries(obj));

// // // // // // // // let orderArr = ['blendedClientUtilizationAnnualHrs', 'contractorsOnsiteHrs', 'ibmWeightedUtilizationAnnualHrs',
// // // // // // // //     "ibmWeightedUtilizationMonthlyHrs", 'landedHrs', 'localHrs', 'offshoreContractorsHrs', 'offshoreHrs', 'uiStatus']
// // // // // // // // let newObj = {}
// // // // // // // // function arrange(obj, orderArr) {
// // // // // // // //     orderArr.forEach(element => {
// // // // // // // //         for (const key in (obj)) {
// // // // // // // //             if (key.includes(element)) {
// // // // // // // //                 newObj[key] = obj[key]
// // // // // // // //             }
// // // // // // // //         }
// // // // // // // //     });
// // // // // // // //     return newObj;
// // // // // // // // }
// // // // // // // // console.log(arrange(obj, orderArr));


// // // // // // // // console.log(4||9)
// // // // // // // // console.log(4&&9&&0)

// // // // // // // // //I/P --laviRastogi
// // // // // // // // //o/p --{ l: 1, a: 2, v: 1, i: 2, R: 1, s: 1, t: 1, o: 1, g: 1 }
// // // // // // // //  let x='laviRastogi'
// // // // // // // //  var obj={}
// // // // // // // // let newarr=x.split('').forEach((ele)=>{
// // // // // // // //     obj[ele]=obj[ele]+1||1;
// // // // // // // // })
// // // // // // // // console.log(obj)

// // // // // // // let zero=new Number(0); // craeted a object 
// // // // // // // console.log(zero===0) //object

// // // // // // // if(zero){
// // // // // // //     console.log('object always return truthy value')
// // // // // // // }
// // // // // // // if({}){
// // // // // // //     console.log('hi')
// // // // // // // }


// // // // // // function outer(f = ab) {
// // // // // //     var ab=90;
// // // // // //     function inner() {
// // // // // //       return "Inner";
// // // // // //     }
// // // // // //   }
// // // // // //   outer();

// // // // //  let p=new Promise((resolve,reject)=>{
// // // // //      resolve(24)
// // // // //  })
// // // // //   console.log(p.then(console.log));
  
// // // // console.log(typeof [2,5])

// // // const arrTest = [10, 20, 30, 40, 50][1, 3];   
// // // console.log(arrTest);
// // // var a = 3;
// // // var b = {
// // //   a: 9,
// // //   b: ++a
// // // };
// // // console.log(a + b.a + ++b.b);

// // var obj={1:8}
// // console.log(obj['1'])

// const person = {
//     name: 'Ayush Verma',
//     25: 25
//   };
  
//   console.log(person[25]);
//   console.log(person[.25e2]);
//   console.log(typeof NaN);


// no addition/deletion/modification
let obj={name:'lavi',lastName:'rastogi'}
Object.freeze(obj)

obj.name='divya'
obj.jj='ffff'
delete['lastName']

console.log(obj)
//{ name: 'lavi', lastName: 'rastogi' }


// no addition/deletion
let obj1={name:'lavi3',lastName:'rastogi2'}
Object.seal(obj1)


obj1.name='divyae'
obj1.jj='ffff3'
delete['lastName']

console.log(obj1)
//{ name: 'divyae', lastName: 'rastogi2' }
